//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./FileManager_types');
//HELPER FUNCTIONS AND STRUCTURES

FileManager_add_args = function(args) {
  this.file = null;
  this.userId = null;
  if (args) {
    if (args.file !== undefined) {
      this.file = args.file;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
FileManager_add_args.prototype = {};
FileManager_add_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.file = new ttypes.File();
        this.file.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_add_args.prototype.write = function(output) {
  output.writeStructBegin('FileManager_add_args');
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRUCT, 1);
    this.file.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManager_add_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileManager_add_result.prototype = {};
FileManager_add_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_add_result.prototype.write = function(output) {
  output.writeStructBegin('FileManager_add_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManager_remove_args = function(args) {
  this.id = null;
  this.mainId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.mainId !== undefined) {
      this.mainId = args.mainId;
    }
  }
};
FileManager_remove_args.prototype = {};
FileManager_remove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_remove_args.prototype.write = function(output) {
  output.writeStructBegin('FileManager_remove_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.mainId !== null && this.mainId !== undefined) {
    output.writeFieldBegin('mainId', Thrift.Type.STRING, 2);
    output.writeString(this.mainId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManager_remove_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileManager_remove_result.prototype = {};
FileManager_remove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_remove_result.prototype.write = function(output) {
  output.writeStructBegin('FileManager_remove_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManager_abandon_args = function(args) {
  this.mainId = null;
  this.userId = null;
  this.parentId = null;
  this.url = null;
  if (args) {
    if (args.mainId !== undefined) {
      this.mainId = args.mainId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.parentId !== undefined) {
      this.parentId = args.parentId;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
  }
};
FileManager_abandon_args.prototype = {};
FileManager_abandon_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.parentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_abandon_args.prototype.write = function(output) {
  output.writeStructBegin('FileManager_abandon_args');
  if (this.mainId !== null && this.mainId !== undefined) {
    output.writeFieldBegin('mainId', Thrift.Type.STRING, 1);
    output.writeString(this.mainId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.parentId !== null && this.parentId !== undefined) {
    output.writeFieldBegin('parentId', Thrift.Type.STRING, 3);
    output.writeString(this.parentId);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 4);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManager_abandon_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileManager_abandon_result.prototype = {};
FileManager_abandon_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_abandon_result.prototype.write = function(output) {
  output.writeStructBegin('FileManager_abandon_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManager_rename_args = function(args) {
  this.id = null;
  this.name = null;
  this.mainId = null;
  this.userId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.mainId !== undefined) {
      this.mainId = args.mainId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
FileManager_rename_args.prototype = {};
FileManager_rename_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_rename_args.prototype.write = function(output) {
  output.writeStructBegin('FileManager_rename_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.mainId !== null && this.mainId !== undefined) {
    output.writeFieldBegin('mainId', Thrift.Type.STRING, 3);
    output.writeString(this.mainId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 4);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManager_rename_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileManager_rename_result.prototype = {};
FileManager_rename_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_rename_result.prototype.write = function(output) {
  output.writeStructBegin('FileManager_rename_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManager_moveTo_args = function(args) {
  this.id = null;
  this.mainId = null;
  this.userId = null;
  this.moveToParentId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.mainId !== undefined) {
      this.mainId = args.mainId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.moveToParentId !== undefined) {
      this.moveToParentId = args.moveToParentId;
    }
  }
};
FileManager_moveTo_args.prototype = {};
FileManager_moveTo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.moveToParentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_moveTo_args.prototype.write = function(output) {
  output.writeStructBegin('FileManager_moveTo_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.mainId !== null && this.mainId !== undefined) {
    output.writeFieldBegin('mainId', Thrift.Type.STRING, 2);
    output.writeString(this.mainId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 3);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.moveToParentId !== null && this.moveToParentId !== undefined) {
    output.writeFieldBegin('moveToParentId', Thrift.Type.STRING, 4);
    output.writeString(this.moveToParentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManager_moveTo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileManager_moveTo_result.prototype = {};
FileManager_moveTo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_moveTo_result.prototype.write = function(output) {
  output.writeStructBegin('FileManager_moveTo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManager_addMessageFiles_args = function(args) {
  this.messageId = null;
  this.companyId = null;
  this.userId = null;
  this.fileList = null;
  if (args) {
    if (args.messageId !== undefined) {
      this.messageId = args.messageId;
    }
    if (args.companyId !== undefined) {
      this.companyId = args.companyId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.fileList !== undefined) {
      this.fileList = args.fileList;
    }
  }
};
FileManager_addMessageFiles_args.prototype = {};
FileManager_addMessageFiles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.companyId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.fileList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.File();
          elem6.read(input);
          this.fileList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_addMessageFiles_args.prototype.write = function(output) {
  output.writeStructBegin('FileManager_addMessageFiles_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.STRING, 2);
    output.writeString(this.companyId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 3);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.fileList !== null && this.fileList !== undefined) {
    output.writeFieldBegin('fileList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.fileList.length);
    for (var iter7 in this.fileList)
    {
      if (this.fileList.hasOwnProperty(iter7))
      {
        iter7 = this.fileList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManager_addMessageFiles_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileManager_addMessageFiles_result.prototype = {};
FileManager_addMessageFiles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_addMessageFiles_result.prototype.write = function(output) {
  output.writeStructBegin('FileManager_addMessageFiles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManager_abandonMessageFiles_args = function(args) {
  this.messageId = null;
  if (args) {
    if (args.messageId !== undefined) {
      this.messageId = args.messageId;
    }
  }
};
FileManager_abandonMessageFiles_args.prototype = {};
FileManager_abandonMessageFiles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_abandonMessageFiles_args.prototype.write = function(output) {
  output.writeStructBegin('FileManager_abandonMessageFiles_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManager_abandonMessageFiles_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileManager_abandonMessageFiles_result.prototype = {};
FileManager_abandonMessageFiles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileManager_abandonMessageFiles_result.prototype.write = function(output) {
  output.writeStructBegin('FileManager_abandonMessageFiles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileManagerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
FileManagerClient.prototype = {};
FileManagerClient.prototype.add = function(file, userId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_add(file, userId);
};

FileManagerClient.prototype.send_add = function(file, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add', Thrift.MessageType.CALL, this.seqid);
  var args = new FileManager_add_args();
  args.file = file;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileManagerClient.prototype.recv_add = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileManager_add_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add failed: unknown result');
};
FileManagerClient.prototype.remove = function(id, mainId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_remove(id, mainId);
};

FileManagerClient.prototype.send_remove = function(id, mainId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('remove', Thrift.MessageType.CALL, this.seqid);
  var args = new FileManager_remove_args();
  args.id = id;
  args.mainId = mainId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileManagerClient.prototype.recv_remove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileManager_remove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('remove failed: unknown result');
};
FileManagerClient.prototype.abandon = function(mainId, userId, parentId, url, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_abandon(mainId, userId, parentId, url);
};

FileManagerClient.prototype.send_abandon = function(mainId, userId, parentId, url) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('abandon', Thrift.MessageType.CALL, this.seqid);
  var args = new FileManager_abandon_args();
  args.mainId = mainId;
  args.userId = userId;
  args.parentId = parentId;
  args.url = url;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileManagerClient.prototype.recv_abandon = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileManager_abandon_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('abandon failed: unknown result');
};
FileManagerClient.prototype.rename = function(id, name, mainId, userId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_rename(id, name, mainId, userId);
};

FileManagerClient.prototype.send_rename = function(id, name, mainId, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rename', Thrift.MessageType.CALL, this.seqid);
  var args = new FileManager_rename_args();
  args.id = id;
  args.name = name;
  args.mainId = mainId;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileManagerClient.prototype.recv_rename = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileManager_rename_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('rename failed: unknown result');
};
FileManagerClient.prototype.moveTo = function(id, mainId, userId, moveToParentId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_moveTo(id, mainId, userId, moveToParentId);
};

FileManagerClient.prototype.send_moveTo = function(id, mainId, userId, moveToParentId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('moveTo', Thrift.MessageType.CALL, this.seqid);
  var args = new FileManager_moveTo_args();
  args.id = id;
  args.mainId = mainId;
  args.userId = userId;
  args.moveToParentId = moveToParentId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileManagerClient.prototype.recv_moveTo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileManager_moveTo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('moveTo failed: unknown result');
};
FileManagerClient.prototype.addMessageFiles = function(messageId, companyId, userId, fileList, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addMessageFiles(messageId, companyId, userId, fileList);
};

FileManagerClient.prototype.send_addMessageFiles = function(messageId, companyId, userId, fileList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addMessageFiles', Thrift.MessageType.CALL, this.seqid);
  var args = new FileManager_addMessageFiles_args();
  args.messageId = messageId;
  args.companyId = companyId;
  args.userId = userId;
  args.fileList = fileList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileManagerClient.prototype.recv_addMessageFiles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileManager_addMessageFiles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addMessageFiles failed: unknown result');
};
FileManagerClient.prototype.abandonMessageFiles = function(messageId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_abandonMessageFiles(messageId);
};

FileManagerClient.prototype.send_abandonMessageFiles = function(messageId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('abandonMessageFiles', Thrift.MessageType.CALL, this.seqid);
  var args = new FileManager_abandonMessageFiles_args();
  args.messageId = messageId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileManagerClient.prototype.recv_abandonMessageFiles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileManager_abandonMessageFiles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('abandonMessageFiles failed: unknown result');
};
FileManagerProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
FileManagerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

FileManagerProcessor.prototype.process_add = function(seqid, input, output) {
  var args = new FileManager_add_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.add(args.file, args.userId, function (err, result) {
    var result = new FileManager_add_result((err != null ? err : {success: result}));
    output.writeMessageBegin("add", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FileManagerProcessor.prototype.process_remove = function(seqid, input, output) {
  var args = new FileManager_remove_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.remove(args.id, args.mainId, function (err, result) {
    var result = new FileManager_remove_result((err != null ? err : {success: result}));
    output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FileManagerProcessor.prototype.process_abandon = function(seqid, input, output) {
  var args = new FileManager_abandon_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.abandon(args.mainId, args.userId, args.parentId, args.url, function (err, result) {
    var result = new FileManager_abandon_result((err != null ? err : {success: result}));
    output.writeMessageBegin("abandon", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FileManagerProcessor.prototype.process_rename = function(seqid, input, output) {
  var args = new FileManager_rename_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.rename(args.id, args.name, args.mainId, args.userId, function (err, result) {
    var result = new FileManager_rename_result((err != null ? err : {success: result}));
    output.writeMessageBegin("rename", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FileManagerProcessor.prototype.process_moveTo = function(seqid, input, output) {
  var args = new FileManager_moveTo_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.moveTo(args.id, args.mainId, args.userId, args.moveToParentId, function (err, result) {
    var result = new FileManager_moveTo_result((err != null ? err : {success: result}));
    output.writeMessageBegin("moveTo", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FileManagerProcessor.prototype.process_addMessageFiles = function(seqid, input, output) {
  var args = new FileManager_addMessageFiles_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.addMessageFiles(args.messageId, args.companyId, args.userId, args.fileList, function (err, result) {
    var result = new FileManager_addMessageFiles_result((err != null ? err : {success: result}));
    output.writeMessageBegin("addMessageFiles", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FileManagerProcessor.prototype.process_abandonMessageFiles = function(seqid, input, output) {
  var args = new FileManager_abandonMessageFiles_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.abandonMessageFiles(args.messageId, function (err, result) {
    var result = new FileManager_abandonMessageFiles_result((err != null ? err : {success: result}));
    output.writeMessageBegin("abandonMessageFiles", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

